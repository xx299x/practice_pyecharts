{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n"
     ]
    }
   ],
   "source": [
    "a= 6\n",
    "b=7\n",
    "area=a*b\n",
    "print(area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time:22:30:36\n"
     ]
    }
   ],
   "source": [
    "a=5364\n",
    "b=86400\n",
    "y=(b-a)//3600\n",
    "x=((b-a)-y*3600)//60\n",
    "d=((b-a)-y*3600-x*60)\n",
    "print(\"Time:%02d:%02d:%02d\"%(y,x,d))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n",
      "0\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a=1\n",
    "b=2\n",
    "c=3\n",
    "d=0\n",
    "print(a>b and b>c or a+b<c)#1\n",
    "print(a-b<c or b>c and not c)#2\n",
    "print(not d or b>c and not c)#3\n",
    "print(d and b and c>d and a*b>c)#4\n",
    "print(not (a>b and c>d))#5\n",
    "print(a*b>c or b+c>d and not d)#6\n",
    "print(c+d<=b+d and d<c or 2*b>c)#7\n",
    "print(d<b or c>a+b+d and b<c+a)#8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x>=-5 and x<=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "-1\n",
      "False\n",
      "False\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "a=1\n",
    "b=2\n",
    "c=3\n",
    "x=4\n",
    "y=3\n",
    "print(a+b>c and b==c)#1\n",
    "print(not a<b and b !=c or x+y<=3)#2\n",
    "print(a+(b>x+y) and c-a and y-x)#3\n",
    "print(not (x==a) and (y==b) and 0)#4\n",
    "print(not (a+b)+c-1 and b+c/2)#5\n",
    "print(a or 1+'a' and b and 'c')#6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "x = -2\n",
    "def abs2(x):\n",
    "    if x > 0:\n",
    "         return x\n",
    "    else:\n",
    "         return -x\n",
    "print(abs2(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-5\n"
     ]
    }
   ],
   "source": [
    "x = -3\n",
    "def f(x):\n",
    "    return 2*x+1\n",
    "print(f(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "数学成绩:80\n",
      "语文成绩:86\n",
      "英文成绩：79\n",
      "总分： 245.0 平均： 81.66666666666667\n"
     ]
    }
   ],
   "source": [
    "math = input(\"数学成绩:\")\n",
    "chinese = input(\"语文成绩:\")\n",
    "english = input(\"英文成绩：\")\n",
    "math = float(math)\n",
    "chinese = float(chinese)\n",
    "english = float (english)\n",
    "sum = math + chinese + english\n",
    "print(\"总分：\",sum,\"平均：\",sum/3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
